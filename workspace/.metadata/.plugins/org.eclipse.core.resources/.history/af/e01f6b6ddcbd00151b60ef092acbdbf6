package friday_v1;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

import friday.InputException;

public class BankAccountsCommandLineInterface {
	private BankAccount mActiveAccount;
	private Scanner mInput;
	private PrintStream mOutput;

	enum Commands {
		start("start"), stop("stop"), create_bank_account("create_bank_account"), show_history(
				"show_history"), add_money("add_money"), withdraw_money("withdraw_money"), transfer_money(
						"transfer_money"), calculate_amount("calculate_amount");

		private String mCommandText;

		private Commands(String commandText) {
			mCommandText = commandText;
		}

	};

	public BankAccountsCommandLineInterface() {
		this.mActiveAccount = null;
		this.mInput = null;
		this.mOutput = null;
	}
	
	public BankAccountsCommandLineInterface(Scanner input,PrintStream output) {
		this.mActiveAccount = null;
		this.mInput = input;
		this.mOutput = output;
	}

	public BankAccountsCommandLineInterface(BankAccount account) {
		this.mActiveAccount = account;
	}

	public BankAccount getActiveAccount() {
		return this.mActiveAccount;
	}

	public void setActiveAccount(BankAccount account) {
		this.mActiveAccount = account;
	}

	public void start() throws IOException {
		Commands command = Commands.start;
		StringBuilder firstName = new StringBuilder("");
		StringBuilder lastName = new StringBuilder("");
		StringBuilder interestType = new StringBuilder("");
		Integer age = 0;
		Double balance = null ;
		Double interest = null ;
		while (true) {
			this.mOutput.println("Willkommen!!!");
			command.mCommandText = this.mInput.next();
			switch (command.mCommandText) {
			case "create_bank_account": {
				while(!safeStringInput("Name:",firstName)){
					mOutput.println("Fehler.");
					mOutput.println("Ihre Name muss mindestens zwei Buchstaben sein.");
					mOutput.println("Ihre Name sollten keine Zahlen enthalten.");
					mOutput.println("Bitte,eintreten Sie die Information noch einmal.");
				}
				while(!safeStringInput("Familienname",lastName)){
					mOutput.println("Fehler.");
					mOutput.println("Ihre Familienname muss mindestens zwei Buchstaben sein.");
					mOutput.println("Ihre Familienname sollten keine Zahlen enthalten.");
					mOutput.println("Bitte,eintreten Sie die Information noch einmal.");
				}
				while(!safeIntInput("Jahre:",age,0)){
					mOutput.println("Fehler.");
					mOutput.println("Bitte,eintreten Sie die Information noch einmal.");
				}
				
				while(!safeDoubleInput("Kontostand:",balance,1)){
					mOutput.println("Fehler.");
					mOutput.println("Die Kontostand muss mindestens 1 lev sein.");
					mOutput.println("Bitte,eintreten Sie die Information noch einmal.");
				}
				while(!safeDoubleInput("Interesse:",interest,0,1)){
					mOutput.println("Fehler.");
					mOutput.println("Das interesse muss zwischen 0 und 1 sein.");
					mOutput.println("Bitte,eintreten Sie die Information noch einmal.");
				}
				while(!safeStringInput("Interesse Typ:",interestType)){
					if(!interestType.toString().equals("complex") && !interestType.toString().equals("simple")){
						mOutput.println("Fehler.");
						mOutput.println("Das interesse Typ kann nur 'complex' oder 'simple' sein.");
						mOutput.println("Bitte,eintreten Sie die Information noch einmal.");
					}
				}
				try {
					setActiveAccount(new BankAccount(firstName.toString(),lastName.toString(),age,balance,interest,interestType.toString()));
				} catch (InputException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			}

		}
	}

	public Scanner getInput() {
		return mInput;
	}

	public void setInput(Scanner mInput) {
		this.mInput = mInput;
	}

	public PrintStream getOutput() {
		return mOutput;
	}

	public void setOutput(PrintStream mOutput) {
		this.mOutput = mOutput;
	}

	public boolean isValidString(String word) {
		int i = 0;
		boolean result = true;
		for (i = 0; i < word.length(); i++) {
			if (!Character.isLetter(word.charAt(i))) {
				result = false;
			}
		}
		return result;
	}
	
	public boolean safeStringInput(String informationMessage, StringBuilder word) throws IOException {
		boolean result = false;
		String input = "";
		mOutput.println(informationMessage);
		input = mInput.next();
		word.append(input);
		if (isValidString(word.toString()) && word.length() >= 2) {
			result = true;
		}
		return result;
	}

	public boolean safeIntInput(String informationMessage, int integer, int lowerBoundary) throws IOException {
		boolean result = false;
		mOutput.println(informationMessage);
		integer = mInput.nextInt();
		if (integer >= lowerBoundary) {
			result = true;
		}

		return result;
	}

	public boolean safeDoubleInput(String informationMessage, double number, double lowerBoundary) throws IOException {
		boolean result = false;
		mOutput.println(informationMessage);
		number = mInput.nextDouble();
		if(number >= lowerBoundary){
			result = true;
		}
		return result;
	}
	
	public boolean safeDoubleInput(String informationMessage, double number, double lowerBoundary,double upperBoundary) throws IOException {
		boolean result = false;
		mOutput.println(informationMessage);
		number = mInput.nextDouble();
		if(number>=lowerBoundary && number<=upperBoundary){
			result = true;
		}
		return result;
	}
	
}
